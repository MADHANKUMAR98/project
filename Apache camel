To move a file to Amazon S3 using a Recipient List in Apache Camel with Spring Boot, you can use the AWS2 S3 Camel component along with the recipient list EIP. Below is a simple working example.


---

1. Add Dependencies (Maven)

In your pom.xml:

<dependencies>
    <!-- Camel core and Spring Boot starter -->
    <dependency>
        <groupId>org.apache.camel.springboot</groupId>
        <artifactId>camel-spring-boot-starter</artifactId>
        <version>4.4.0</version>
    </dependency>

    <!-- Camel AWS2 S3 Component -->
    <dependency>
        <groupId>org.apache.camel.springboot</groupId>
        <artifactId>camel-aws2-s3-starter</artifactId>
        <version>4.4.0</version>
    </dependency>

    <!-- AWS SDK v2 -->
    <dependency>
        <groupId>software.amazon.awssdk</groupId>
        <artifactId>s3</artifactId>
    </dependency>
</dependencies>


---

2. application.properties

camel.component.aws2-s3.access-key=your-access-key
camel.component.aws2-s3.secret-key=your-secret-key
camel.component.aws2-s3.region=your-region
camel.component.aws2-s3.use-default-credentials-provider=false
camel.component.aws2-s3.auto-create-bucket=true


---

3. Camel Route using Recipient List

Create a route that uses the recipient list to dynamically route the file to an S3 bucket:

import org.apache.camel.builder.RouteBuilder;
import org.springframework.stereotype.Component;

@Component
public class FileToS3Route extends RouteBuilder {

    @Override
    public void configure() throws Exception {
        from("file:input?noop=true")
            .log("File picked up: ${header.CamelFileName}")
            .setHeader("s3BucketName", constant("my-s3-bucket"))
            .recipientList(simple("aws2-s3://${header.s3BucketName}?autoCreateBucket=true"))
            .log("File uploaded to S3: ${header.CamelFileName}");
    }
}


---

4. Directory Structure

Place your input files in the input/ directory in your project root (or change the path in the route).



---

5. How Recipient List Works Here

recipientList(simple("aws2-s3://${header.s3BucketName}")) allows you to dynamically decide the S3 bucket (and you can expand this for multiple destinations).

This makes it flexible to decide the recipient endpoint at runtime.



---

Let me know if:

You want to move files to multiple S3 buckets.

You’re using YAML config instead of properties.

You want to read bucket names from a DB or config file.



package com.example.camels3;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class CamelS3Application {
    public static void main(String[] args) {
        SpringApplication.run(CamelS3Application.class, args);
    }
}



To get your AWS S3 access credentials (Access Key & Secret Key), follow this step-by-step guide. These credentials allow your Apache Camel Spring Boot app to access S3 securely.


---

Step-by-Step: Get AWS S3 Access Key & Secret Key

> Important: Use an IAM user for programmatic access — not your root account.




---

Step 1: Sign in to AWS Console

1. Go to: https://aws.amazon.com/


2. Click Sign In to the Console


3. Use your AWS root account (or IAM user if already created)




---

Step 2: Open the IAM Console

1. Once logged in, go to the Search bar at the top


2. Type IAM and click on the IAM (Identity and Access Management) service




---

Step 3: Create an IAM User

1. In the IAM dashboard, click Users on the left sidebar


2. Click the "Add users" button



Step-by-step in the wizard:

User name: camel-s3-user

Access type:

Check Programmatic access



Click Next: Permissions


---

Step 4: Attach Permissions

You need to allow this user to access S3.

Choose:
Attach policies directly

Then:

Search for: AmazonS3FullAccess

Check the box


Click Next until the last step and then Create user


---

Step 5: Get Access Key & Secret Key

Once the user is created:

You’ll see a Success screen

Click Download .csv or Copy the:

Access key ID

Secret access key



> Note: You will not be able to view the secret key again later. So download or save it securely.




---

Step 6: Use the Credentials in Spring Boot App

In application.properties:

camel.component.aws2-s3.access-key=YOUR_ACCESS_KEY
camel.component.aws2-s3.secret-key=YOUR_SECRET_KEY
camel.component.aws2-s3.region=us-east-1


---

Optional: Secure via Environment Variables

You can also set these keys using environment variables for security:

export AWS_ACCESS_KEY_ID=your-access-key
export AWS_SECRET_ACCESS_KEY=your-secret-key

And remove them from application.properties.


---

Let me know if you want to restrict the user to only one bucket, or want a ZIP of the project preconfigured for Eclipse.

